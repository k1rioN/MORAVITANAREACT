export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
  }

  try {
    const { name, contactMethod, telegram, phone, message } = req.body || {};

    if (!name || !message || !contactMethod) {
      return res.status(400).json({ ok: false, error: 'Missing required fields' });
    }
    if (contactMethod === 'telegram' && !telegram) {
      return res.status(400).json({ ok: false, error: 'Telegram username required' });
    }
    if (contactMethod === 'phone' && !phone) {
      return res.status(400).json({ ok: false, error: 'Phone required' });
    }

    // —á–∏—Ç–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–º—ë–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const token =
      process.env.TELEGRAM_BOT_TOKEN ||
      process.env.BOT_TOKEN ||
      '';
    const chatId =
      process.env.TELEGRAM_CHAT_ID ||
      process.env.CHAT_ID ||
      '';

    const lines = [
      'üß† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
      `‚Ä¢ –ò–º—è: ${name}`,
      `‚Ä¢ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${contactMethod === 'telegram' ? 'Telegram' : '–¢–µ–ª–µ—Ñ–æ–Ω'}`,
      contactMethod === 'telegram'
        ? `‚Ä¢ –ù–∏–∫: ${telegram?.startsWith('@') ? telegram : '@' + telegram}`
        : null,
      contactMethod === 'phone' ? `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}` : null,
      '',
      '–°–æ–æ–±—â–µ–Ω–∏–µ:',
      message,
    ].filter(Boolean);

    const text = lines.join('\n');

    if (!token || !chatId) {
      // –ü–æ–º–æ–≥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
      return res.status(500).json({
        ok: false,
        error:
          'Missing TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID (–∏–ª–∏ BOT_TOKEN/CHAT_ID) –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel',
      });
    }

    const url = `https://api.telegram.org/bot${token}/sendMessage`;
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });

    const data = await r.json();

    if (!data.ok) {
      // –≤–æ–∑–≤—Ä. –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç Telegram, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –Ω–µ —Ç–∞–∫
      return res
        .status(500)
        .json({ ok: false, error: 'Telegram API error', details: data });
    }

    return res.status(200).json({ ok: true, via: 'telegram' });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok: false, error: 'Server error' });
  }
}
